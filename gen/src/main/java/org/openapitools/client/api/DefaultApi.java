/*
 * API d'authentification
 * Une API d'authentification sécurisée pour les utilisateurs
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.InlineObject;
import org.openapitools.client.model.InlineObject1;
import org.openapitools.client.model.InlineObject2;
import org.openapitools.client.model.InlineObject3;
import org.openapitools.client.model.InlineResponse200;
import org.openapitools.client.model.InlineResponse2001;
import org.openapitools.client.model.InlineResponse2002;
import org.openapitools.client.model.InlineResponse2003;
import org.openapitools.client.model.InlineResponse201;
import org.openapitools.client.model.InlineResponse2011;
import org.openapitools.client.model.InlineResponse2012;
import org.openapitools.client.model.InlineResponse400;
import org.openapitools.client.model.InlineResponse4001;
import org.openapitools.client.model.InlineResponse4002;
import org.openapitools.client.model.InlineResponse401;
import org.openapitools.client.model.InlineResponse4011;
import org.openapitools.client.model.InlineResponse4012;
import org.openapitools.client.model.InlineResponse403;
import org.openapitools.client.model.InlineResponse404;
import org.openapitools.client.model.InlineResponse4041;
import org.openapitools.client.model.InlineResponse500;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for loginPost
     * @param inlineObject1  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Connexion réussie </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Non autorisé </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erreur serveur interne </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loginPostCall(InlineObject1 inlineObject1, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inlineObject1;

        // create path and map variables
        String localVarPath = "/login";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call loginPostValidateBeforeCall(InlineObject1 inlineObject1, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'inlineObject1' is set
        if (inlineObject1 == null) {
            throw new ApiException("Missing the required parameter 'inlineObject1' when calling loginPost(Async)");
        }
        

        okhttp3.Call localVarCall = loginPostCall(inlineObject1, _callback);
        return localVarCall;

    }

    /**
     * Connexion d&#39;un utilisateur existant
     * Vérifie les informations de connexion d&#39;un utilisateur et renvoie un jeton d&#39;authentification JWT s&#39;il est valide
     * @param inlineObject1  (required)
     * @return InlineResponse200
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Connexion réussie </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Non autorisé </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erreur serveur interne </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse200 loginPost(InlineObject1 inlineObject1) throws ApiException {
        ApiResponse<InlineResponse200> localVarResp = loginPostWithHttpInfo(inlineObject1);
        return localVarResp.getData();
    }

    /**
     * Connexion d&#39;un utilisateur existant
     * Vérifie les informations de connexion d&#39;un utilisateur et renvoie un jeton d&#39;authentification JWT s&#39;il est valide
     * @param inlineObject1  (required)
     * @return ApiResponse&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Connexion réussie </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Non autorisé </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erreur serveur interne </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse200> loginPostWithHttpInfo(InlineObject1 inlineObject1) throws ApiException {
        okhttp3.Call localVarCall = loginPostValidateBeforeCall(inlineObject1, null);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Connexion d&#39;un utilisateur existant (asynchronously)
     * Vérifie les informations de connexion d&#39;un utilisateur et renvoie un jeton d&#39;authentification JWT s&#39;il est valide
     * @param inlineObject1  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Connexion réussie </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Non autorisé </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erreur serveur interne </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loginPostAsync(InlineObject1 inlineObject1, final ApiCallback<InlineResponse200> _callback) throws ApiException {

        okhttp3.Call localVarCall = loginPostValidateBeforeCall(inlineObject1, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sauceGet
     * @param id ID de la sauce à récupérer. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Renvoi la sauce demandée. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> La sauce demandée n&#39;a pas été trouvée. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sauceGetCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sauce";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sauceGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling sauceGet(Async)");
        }
        

        okhttp3.Call localVarCall = sauceGetCall(id, _callback);
        return localVarCall;

    }

    /**
     * Récupération d&#39;une sauce
     * 
     * @param id ID de la sauce à récupérer. (required)
     * @return InlineResponse2001
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Renvoi la sauce demandée. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> La sauce demandée n&#39;a pas été trouvée. </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse2001 sauceGet(String id) throws ApiException {
        ApiResponse<InlineResponse2001> localVarResp = sauceGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Récupération d&#39;une sauce
     * 
     * @param id ID de la sauce à récupérer. (required)
     * @return ApiResponse&lt;InlineResponse2001&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Renvoi la sauce demandée. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> La sauce demandée n&#39;a pas été trouvée. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse2001> sauceGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = sauceGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<InlineResponse2001>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Récupération d&#39;une sauce (asynchronously)
     * 
     * @param id ID de la sauce à récupérer. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Renvoi la sauce demandée. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> La sauce demandée n&#39;a pas été trouvée. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sauceGetAsync(String id, final ApiCallback<InlineResponse2001> _callback) throws ApiException {

        okhttp3.Call localVarCall = sauceGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse2001>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sauceIdDelete
     * @param id ID de la sauce à supprimer. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sauce supprimée avec succès. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> L&#39;utilisateur n&#39;est pas autorisé à supprimer cette sauce. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erreur du serveur. Impossible de supprimer la sauce. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sauceIdDeleteCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sauce/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sauceIdDeleteValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling sauceIdDelete(Async)");
        }
        

        okhttp3.Call localVarCall = sauceIdDeleteCall(id, _callback);
        return localVarCall;

    }

    /**
     * Suppression d&#39;une sauce
     * 
     * @param id ID de la sauce à supprimer. (required)
     * @return InlineResponse2003
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sauce supprimée avec succès. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> L&#39;utilisateur n&#39;est pas autorisé à supprimer cette sauce. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erreur du serveur. Impossible de supprimer la sauce. </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse2003 sauceIdDelete(String id) throws ApiException {
        ApiResponse<InlineResponse2003> localVarResp = sauceIdDeleteWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Suppression d&#39;une sauce
     * 
     * @param id ID de la sauce à supprimer. (required)
     * @return ApiResponse&lt;InlineResponse2003&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sauce supprimée avec succès. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> L&#39;utilisateur n&#39;est pas autorisé à supprimer cette sauce. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erreur du serveur. Impossible de supprimer la sauce. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse2003> sauceIdDeleteWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = sauceIdDeleteValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<InlineResponse2003>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Suppression d&#39;une sauce (asynchronously)
     * 
     * @param id ID de la sauce à supprimer. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sauce supprimée avec succès. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> L&#39;utilisateur n&#39;est pas autorisé à supprimer cette sauce. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erreur du serveur. Impossible de supprimer la sauce. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sauceIdDeleteAsync(String id, final ApiCallback<InlineResponse2003> _callback) throws ApiException {

        okhttp3.Call localVarCall = sauceIdDeleteValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse2003>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sauceIdLikePost
     * @param id L&#39;id de la sauce (required)
     * @param like like ou dislike (1 ou -1) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> La sauce a été notée </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Une erreur s&#39;est produite lors de la notation de la sauce </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> La requête est invalide </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sauceIdLikePostCall(String id, Integer like, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sauce/{id}/like"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (like != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("like", like));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sauceIdLikePostValidateBeforeCall(String id, Integer like, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling sauceIdLikePost(Async)");
        }
        
        // verify the required parameter 'like' is set
        if (like == null) {
            throw new ApiException("Missing the required parameter 'like' when calling sauceIdLikePost(Async)");
        }
        

        okhttp3.Call localVarCall = sauceIdLikePostCall(id, like, _callback);
        return localVarCall;

    }

    /**
     * like/dislike d&#39;une sauce
     * 
     * @param id L&#39;id de la sauce (required)
     * @param like like ou dislike (1 ou -1) (required)
     * @return InlineResponse2012
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> La sauce a été notée </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Une erreur s&#39;est produite lors de la notation de la sauce </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> La requête est invalide </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse2012 sauceIdLikePost(String id, Integer like) throws ApiException {
        ApiResponse<InlineResponse2012> localVarResp = sauceIdLikePostWithHttpInfo(id, like);
        return localVarResp.getData();
    }

    /**
     * like/dislike d&#39;une sauce
     * 
     * @param id L&#39;id de la sauce (required)
     * @param like like ou dislike (1 ou -1) (required)
     * @return ApiResponse&lt;InlineResponse2012&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> La sauce a été notée </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Une erreur s&#39;est produite lors de la notation de la sauce </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> La requête est invalide </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse2012> sauceIdLikePostWithHttpInfo(String id, Integer like) throws ApiException {
        okhttp3.Call localVarCall = sauceIdLikePostValidateBeforeCall(id, like, null);
        Type localVarReturnType = new TypeToken<InlineResponse2012>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * like/dislike d&#39;une sauce (asynchronously)
     * 
     * @param id L&#39;id de la sauce (required)
     * @param like like ou dislike (1 ou -1) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> La sauce a été notée </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Une erreur s&#39;est produite lors de la notation de la sauce </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> La requête est invalide </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sauceIdLikePostAsync(String id, Integer like, final ApiCallback<InlineResponse2012> _callback) throws ApiException {

        okhttp3.Call localVarCall = sauceIdLikePostValidateBeforeCall(id, like, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse2012>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sauceIdPut
     * @param id ID de la sauce à modifier. (required)
     * @param inlineObject3  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sauce modifiée avec succès. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Mauvaise requête. Vérifiez les données envoyées. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> L&#39;utilisateur n&#39;est pas autorisé à modifier cette sauce. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sauceIdPutCall(String id, InlineObject3 inlineObject3, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inlineObject3;

        // create path and map variables
        String localVarPath = "/sauce/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sauceIdPutValidateBeforeCall(String id, InlineObject3 inlineObject3, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling sauceIdPut(Async)");
        }
        

        okhttp3.Call localVarCall = sauceIdPutCall(id, inlineObject3, _callback);
        return localVarCall;

    }

    /**
     * Modification d&#39;une sauce
     * 
     * @param id ID de la sauce à modifier. (required)
     * @param inlineObject3  (optional)
     * @return InlineResponse2002
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sauce modifiée avec succès. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Mauvaise requête. Vérifiez les données envoyées. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> L&#39;utilisateur n&#39;est pas autorisé à modifier cette sauce. </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse2002 sauceIdPut(String id, InlineObject3 inlineObject3) throws ApiException {
        ApiResponse<InlineResponse2002> localVarResp = sauceIdPutWithHttpInfo(id, inlineObject3);
        return localVarResp.getData();
    }

    /**
     * Modification d&#39;une sauce
     * 
     * @param id ID de la sauce à modifier. (required)
     * @param inlineObject3  (optional)
     * @return ApiResponse&lt;InlineResponse2002&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sauce modifiée avec succès. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Mauvaise requête. Vérifiez les données envoyées. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> L&#39;utilisateur n&#39;est pas autorisé à modifier cette sauce. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse2002> sauceIdPutWithHttpInfo(String id, InlineObject3 inlineObject3) throws ApiException {
        okhttp3.Call localVarCall = sauceIdPutValidateBeforeCall(id, inlineObject3, null);
        Type localVarReturnType = new TypeToken<InlineResponse2002>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Modification d&#39;une sauce (asynchronously)
     * 
     * @param id ID de la sauce à modifier. (required)
     * @param inlineObject3  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sauce modifiée avec succès. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Mauvaise requête. Vérifiez les données envoyées. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> L&#39;utilisateur n&#39;est pas autorisé à modifier cette sauce. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sauceIdPutAsync(String id, InlineObject3 inlineObject3, final ApiCallback<InlineResponse2002> _callback) throws ApiException {

        okhttp3.Call localVarCall = sauceIdPutValidateBeforeCall(id, inlineObject3, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse2002>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for saucePost
     * @param inlineObject2  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Objet enregistré ! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Mauvaise requête. Vérifiez les données envoyées. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saucePostCall(InlineObject2 inlineObject2, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inlineObject2;

        // create path and map variables
        String localVarPath = "/sauce";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call saucePostValidateBeforeCall(InlineObject2 inlineObject2, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'inlineObject2' is set
        if (inlineObject2 == null) {
            throw new ApiException("Missing the required parameter 'inlineObject2' when calling saucePost(Async)");
        }
        

        okhttp3.Call localVarCall = saucePostCall(inlineObject2, _callback);
        return localVarCall;

    }

    /**
     * Création d&#39;une sauce
     * 
     * @param inlineObject2  (required)
     * @return InlineResponse2011
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Objet enregistré ! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Mauvaise requête. Vérifiez les données envoyées. </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse2011 saucePost(InlineObject2 inlineObject2) throws ApiException {
        ApiResponse<InlineResponse2011> localVarResp = saucePostWithHttpInfo(inlineObject2);
        return localVarResp.getData();
    }

    /**
     * Création d&#39;une sauce
     * 
     * @param inlineObject2  (required)
     * @return ApiResponse&lt;InlineResponse2011&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Objet enregistré ! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Mauvaise requête. Vérifiez les données envoyées. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse2011> saucePostWithHttpInfo(InlineObject2 inlineObject2) throws ApiException {
        okhttp3.Call localVarCall = saucePostValidateBeforeCall(inlineObject2, null);
        Type localVarReturnType = new TypeToken<InlineResponse2011>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Création d&#39;une sauce (asynchronously)
     * 
     * @param inlineObject2  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Objet enregistré ! </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Mauvaise requête. Vérifiez les données envoyées. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saucePostAsync(InlineObject2 inlineObject2, final ApiCallback<InlineResponse2011> _callback) throws ApiException {

        okhttp3.Call localVarCall = saucePostValidateBeforeCall(inlineObject2, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse2011>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for saucesGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Renvoi un tableau contenant toutes les sauces. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Aucune sauce n&#39;a été trouvée. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saucesGetCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sauces";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call saucesGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = saucesGetCall(_callback);
        return localVarCall;

    }

    /**
     * Récupération de toutes les sauces dans la base de données
     * 
     * @return List&lt;InlineResponse2001&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Renvoi un tableau contenant toutes les sauces. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Aucune sauce n&#39;a été trouvée. </td><td>  -  </td></tr>
     </table>
     */
    public List<InlineResponse2001> saucesGet() throws ApiException {
        ApiResponse<List<InlineResponse2001>> localVarResp = saucesGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Récupération de toutes les sauces dans la base de données
     * 
     * @return ApiResponse&lt;List&lt;InlineResponse2001&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Renvoi un tableau contenant toutes les sauces. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Aucune sauce n&#39;a été trouvée. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<InlineResponse2001>> saucesGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = saucesGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<InlineResponse2001>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Récupération de toutes les sauces dans la base de données (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Renvoi un tableau contenant toutes les sauces. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Aucune sauce n&#39;a été trouvée. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saucesGetAsync(final ApiCallback<List<InlineResponse2001>> _callback) throws ApiException {

        okhttp3.Call localVarCall = saucesGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<InlineResponse2001>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for signupPost
     * @param inlineObject  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Utilisateur créé avec succès </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Requête invalide </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signupPostCall(InlineObject inlineObject, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inlineObject;

        // create path and map variables
        String localVarPath = "/signup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call signupPostValidateBeforeCall(InlineObject inlineObject, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'inlineObject' is set
        if (inlineObject == null) {
            throw new ApiException("Missing the required parameter 'inlineObject' when calling signupPost(Async)");
        }
        

        okhttp3.Call localVarCall = signupPostCall(inlineObject, _callback);
        return localVarCall;

    }

    /**
     * Inscription d&#39;un nouvel utilisateur
     * Crée un nouvel utilisateur avec un e-mail et un mot de passe et le sauvegarde dans la base de données
     * @param inlineObject  (required)
     * @return InlineResponse201
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Utilisateur créé avec succès </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Requête invalide </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse201 signupPost(InlineObject inlineObject) throws ApiException {
        ApiResponse<InlineResponse201> localVarResp = signupPostWithHttpInfo(inlineObject);
        return localVarResp.getData();
    }

    /**
     * Inscription d&#39;un nouvel utilisateur
     * Crée un nouvel utilisateur avec un e-mail et un mot de passe et le sauvegarde dans la base de données
     * @param inlineObject  (required)
     * @return ApiResponse&lt;InlineResponse201&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Utilisateur créé avec succès </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Requête invalide </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse201> signupPostWithHttpInfo(InlineObject inlineObject) throws ApiException {
        okhttp3.Call localVarCall = signupPostValidateBeforeCall(inlineObject, null);
        Type localVarReturnType = new TypeToken<InlineResponse201>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Inscription d&#39;un nouvel utilisateur (asynchronously)
     * Crée un nouvel utilisateur avec un e-mail et un mot de passe et le sauvegarde dans la base de données
     * @param inlineObject  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Utilisateur créé avec succès </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Requête invalide </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signupPostAsync(InlineObject inlineObject, final ApiCallback<InlineResponse201> _callback) throws ApiException {

        okhttp3.Call localVarCall = signupPostValidateBeforeCall(inlineObject, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse201>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
